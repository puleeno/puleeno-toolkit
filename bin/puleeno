#!/usr/bin/env php
<?php

$rootDir = dirname(__DIR__);

use Cilex\Application;
use Puleeno\Toolkit\Commands\DownloadCommand;
use Puleeno\Toolkit\Interfaces\CommandInterface;

define('PULEENO_TOOLKIT_ROOT_DIR', $rootDir);
define( 'PULEENO_TOOLKIT_WORKING_DIR', getcwd());

class Puleeno_Toolkit {
    protected Application $app;

    /**
     * Summary of commands
     * @var \Puleeno\Toolkit\Interfaces\CommandInterface[]
     */
    protected $commands = [];

    public function __construct() {
        $this->loadComposer();

        $this->app = new Application('puleeno', '2024.01.02');
    }


    protected function loadComposer() {
        $composerAutoloader = implode(DIRECTORY_SEPARATOR, [constant('PULEENO_TOOLKIT_ROOT_DIR'), 'vendor', 'autoload.php']);
        if (!file_exists($composerAutoloader)) {
            exit('Please check your environment');
        }
        require_once $composerAutoloader;
    }

    public function register() {
        $this->commands = array_merge($this->commands, [
            DownloadCommand::class,
        ]);
    }

    public function init() {
        foreach($this->commands as $command) {
            $commandInstance = new $command;
            if (!$commandInstance instanceof CommandInterface) {
                continue;
            }
            $reflect = new ReflectionClass($command);
            /**
             * @var \Puleeno\Toolkit\Interfaces\CommandInterface
             */
            $commandInstance = $reflect->newInstanceArgs([$commandInstance->getCommandName()]);
            $command = $this->app->command($commandInstance)
                ->setDescription($commandInstance->getDescription());

            if ($commandInstance->getAlias()) {
                $command->setAliases([$commandInstance->getAlias()]);
            }
        }
    }

    public function run() {
        $this->app->run();
    }
}

$toolkit = new Puleeno_Toolkit();
$toolkit->register();
$toolkit->init();
$toolkit->run();
